#!/usr/bin/env python3
from math import exp
from time import time
from parser import get_args

def factorial(n: int) -> int:
    """Compute the factorial of a number

    ### Parameters
    1. n : int
        - number to compute

    ### Returns
    - int
        - factorial of the number
    """
    return 1 if n <= 0 else n * factorial(n-1)


def get_binome(n: int, k: int) -> int:
    """Compute the binom (n, k) which is
    the subset of k elements from a fixed set of n elements

    ### Parameters
    1. n : int
        - size of the set
    2. k : int
        - size od subset

    ### Returns
    - int
        - result of n choose k
    """
    res = 1
    nk = n - k
    for i in range(1, k + 1):
        res = ((nk + i) * res) // i
    return res


def poisson(lam: int, k: int) -> float:
        return (exp(-lam) * (lam ** k)) / factorial(k)

def loi_binomial(p: int, n: int, k: int) -> int:
    return get_binome(n, k) * (p ** k) * ((1 - p) ** (n - k))


def print_list(l: list[float]) -> None:
    """Display the result list in the correct format

    ### Parameters
    1. l : list[float]
        - list to display
    ### Returns
    - None
    """
    for i in range(len(l)):
        print(f"{i} -> {l[i]:.3f}", end="")
        if (i+1) % 5 == 0 or i == 50: print()
        else: print("\t", end="")

def get_list_binom(d: int) -> list[float]:
    """Compute the probabilities of getting simultaneous calls with binomial law

    ### Parameters
    1. d : int
        - average duration of calls
    ### Returns
    - list[float]
        - probabilities (from 1 to 50)
    """
    res = []
    p = d / (8 * 60 * 60)
    for i in range(51):
        res.append(loi_binomial(p, 3500, i))
    return res

def get_list_poisson(d: int) -> list[float]:
    """Compute the probabilities of getting simultaneous calls with poisson's law

    ### Parameters
    1. d : int
        - average duration of calls
    ### Returns
    - list[float]
        - probabilities (from 1 to 50)
    """
    res = []
    lam = 3500 * (d / (8 * 60 * 60))
    for i in range(51):
        res.append(poisson(lam, i))
    return res

def print_overload(l: list[float]) -> None:
    """Display the overload line from the result list

    ### Parameters
    1. l : list[float]
        - list to compute
    ### Returns
    - None
    """
    print(f"Overload: {(1 - sum(l[:26])) * 100:.1f}%")

def get_n_k(n: int, k: int) -> None:
    print(f"{k}-combinations of a set of size {n}:")
    print(get_binome(n, k))

def disp_res_list(l: list[float], start: int) -> None:
    """Display the list, it's overload and time to compute

    ### Parameters
    1. l : list[float]
        - list to display
    2: start: int
        - time of the compute start
    ### Returns
    - None
    """
    print_list(l)
    print_overload(l)
    print(f"Computation time: {(time() - start) * 1000:.2f} ms")

def get_res_d(d: int) -> None:
    start = time()
    print("Binomial distribution:")
    list_binom = get_list_binom(d)
    disp_res_list(list_binom, start)

    print()

    start = time()
    print("Poisson distribution:")
    list_poisson = get_list_poisson(d)
    disp_res_list(list_poisson, start)






if __name__ == "__main__":
    args = get_args()
    if (len(args) == 1):
        get_res_d(int(args[0]))
        exit(0)
    if (len(args) == 2):
        get_n_k(int(args[0]), int(args[1]))
        exit(0)
    exit(84)
