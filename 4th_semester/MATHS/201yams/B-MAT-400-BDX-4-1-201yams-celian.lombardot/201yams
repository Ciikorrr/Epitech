#!/usr/bin/env python3
from yams.parser_1 import get_args
from typing import Union

def prob(nb_event: int) -> float:
    """Probability to get a specific number from a group of dices

    ### Parameters
    1. nb_envent : int
        - number of dice thrown

    ### Returns
    - float
        - probabilities to get the favorable event
    """
    p = 1
    for i in range(nb_event):
        p *= 1/6
    return p

def yams(l: list[int], v: int) -> float:
    """Compute the probabilities to get a yams from a preset

    ### Parameters
    1. l : list[int]
        - initial set of dice
    2. v : int
        - value of the yams

    ### Returns
    - float
        - probability of a yams of value v
    """
    c = l.count(v)
    return prob(5 - c)

def factorial(n: int) -> int:
    """Compute the factorial of a number

    ### Parameters
    1. n : int
        - number to compute

    ### Returns
    - int
        - factorial of the number
    """
    return 1 if n <= 0 else n * factorial(n-1)


def C(n: int,k: int) -> float:
    """Compute the binomial coefficent n choose k

    ### Parameters
    1. n : int
        - size of the ensemble
    2. k : int
        - size of a part

    ### Returns
    - int
        - numbers of parts of size k in the group n
    """
    return factorial(n) / (factorial(k) * factorial(n - k))

def proba(n: int, k: int) -> float:
    """Compute the binomial identity for n and k, of probability 1/6

    ### Parameters
    1. n : int
        - number of dice left
    2. k : int
        - dice to get on a specific value

    ### Returns
    - float
        - result of the binomial identity
    """
    # k = nb_same_voulu
    # n = nb_des_lances
    # C = fac n / k!(n-k)!
    p = 1/6
    res = C(n,k) * pow(p,k) * pow(1-p, n-k)
    return res

def get_proba(c: int, nb_search: int) -> float:
    """Compute the probability to get a combination of dice

    ### Parameters
    1. c : int
        - number of dice already good
    2. nb_search : int
        - dice left to throw

    ### Returns
    - int
        - probability to get a correct combination of dice
    """
    if c > nb_search:
        return 1
    t = 0
    for i in range(nb_search, 6):
        t += proba(5 - c, i - c)
    return t


def count_occu(l: list[int], val: list[int], type: str) -> int:
    """count the number of dice already set for a specific combination

    ### Parameters
    1. l : list[int]
        - initial set of dice
    2. val : list[int]
        - value of the combination
    3. type : str
        - type of the combination ("full", "straight", or others)

    ### Returns
    - int
        - number of dice already in the correct value
    """
    if (type == "full"):
        return [l.count(val[0]), l.count(val[1])]
    if (type != "straight"):
        return l.count(val[0])
    s = set(l)
    if val[0] == 6 and 1 in s:
        s.remove(1)
    if val[0] == 5 and 6 in s:
        s.remove(6)
    return len(s)

def straight(nb) -> float:
    """Compute the probability to get a straight

    ### Parameters
    1. nb : int
        - number of dice already good

    ### Returns
    - float
        - probability to get straight
    """
    p = factorial(5 - nb) / 6 ** (5 - nb)
    return p

def full(nb) -> float:
    """Compute the probability to get a full

    ### Parameters
    1. nb : int
        - number of dice already good

    ### Returns
    - float
        - probability to get full
    """
    if (nb[0] > 3): nb[0] = 3
    if (nb[1] > 2): nb[1] = 2
    to_throw = 5 - sum(nb)
    to_find = 3 - nb[0]
    p = C(to_throw, to_find) / 6 ** to_throw
    return p

def find_proba(l: list[int], name: str, value: list[int]) -> float:
    """Probability to get a combination of dice of a specific value

    ### Parameters
    1. l : list[int]
        - initial set of dice
    2. name : str
        - type of the combination ("full", "straight", or others)
    3. value : list[int]
        - value of the combination

    ### Returns
    - int
        - number of dice already in the correct value
    """
    nb_occu = count_occu(l, value, name)
    if (name == "straight"):
        return straight(nb_occu)
    if (name == "full"):
        return full(nb_occu)
    name_to_type = {"pair": 2, "three": 3, "four": 4, "yams": 5}
    p = get_proba(nb_occu, name_to_type[name])
    return p

def display(name, value, proba) -> None:
    if (name == "full"):
        print(f"Chances to get a {value[0]} full of {value[1]}: {proba:.2f}%")
        return
    if (name == "four" or name == "three"):
        name += "-of-a-kind"
    print(f"Chances to get a {value[0]} {name}: {proba:.2f}%")


def main() -> None:
    args = get_args()
    x = find_proba(args[0], args[1], args[2]) * 100
    display(args[1], args[2], x)

if __name__ == "__main__":
    main()
